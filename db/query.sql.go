// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"encoding/json"
	"time"
)

const getStations = `-- name: GetStations :many
select id,
       name,
       lat,
       lon,
       ebikes_available,
       bike_docks_available,
       ebikes,
       (
           ST_DistanceSphere(
                   ST_MakePoint(lon, lat),
                   ST_MakePoint($1::float, $2::float)
               )
           )::float AS distance, created_at
from stations
where ebikes_available > 0
  and (
          ST_DistanceSphere(
                  ST_MakePoint(lon, lat),
                  ST_MakePoint($1::float, $2::float)
              )
          ) < 3000 -- approx. 2 miles
order by distance limit 10
`

type GetStationsParams struct {
	Lon float64
	Lat float64
}

type GetStationsRow struct {
	ID                 string
	Name               string
	Lat                float64
	Lon                float64
	EbikesAvailable    int32
	BikeDocksAvailable int32
	Ebikes             json.RawMessage
	Distance           float64
	CreatedAt          time.Time
}

func (q *Queries) GetStations(ctx context.Context, arg GetStationsParams) ([]GetStationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStations, arg.Lon, arg.Lat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStationsRow
	for rows.Next() {
		var i GetStationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Lon,
			&i.EbikesAvailable,
			&i.BikeDocksAvailable,
			&i.Ebikes,
			&i.Distance,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStation = `-- name: InsertStation :exec
insert into stations (id,
                      name,
                      lat,
                      lon,
                      ebikes_available,
                      bike_docks_available,
                      ebikes,
                      created_at)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        now() at time zone 'utc') ON CONFLICT (id) DO
UPDATE
    SET
        name = EXCLUDED.name,
    lat = EXCLUDED.lat,
    lon = EXCLUDED.lon,
    ebikes_available = EXCLUDED.ebikes_available,
    bike_docks_available = EXCLUDED.bike_docks_available,
    ebikes = EXCLUDED.ebikes,
    created_at = now() at time zone 'utc'
`

type InsertStationParams struct {
	ID                 string
	Name               string
	Lat                float64
	Lon                float64
	EbikesAvailable    int32
	BikeDocksAvailable int32
	Ebikes             json.RawMessage
}

// InsertStation inserts citibike station data into the database.
func (q *Queries) InsertStation(ctx context.Context, arg InsertStationParams) error {
	_, err := q.db.ExecContext(ctx, insertStation,
		arg.ID,
		arg.Name,
		arg.Lat,
		arg.Lon,
		arg.EbikesAvailable,
		arg.BikeDocksAvailable,
		arg.Ebikes,
	)
	return err
}

const insertStationTimeseries = `-- name: InsertStationTimeseries :exec
insert into stations_timeseries (id,
                                 name,
                                 lat,
                                 lon,
                                 bikes_available,
                                 ebikes_available,
                                 bike_docks_available,
                                 last_updated_ms,
                                 is_offline)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9) ON CONFLICT (id, last_updated_ms) DO NOTHING
`

type InsertStationTimeseriesParams struct {
	ID                 string
	Name               string
	Lat                float64
	Lon                float64
	BikesAvailable     int32
	EbikesAvailable    int32
	BikeDocksAvailable int32
	LastUpdatedMs      int64
	IsOffline          bool
}

// InsertStationTimeseries appends station data to the timeseries table.
func (q *Queries) InsertStationTimeseries(ctx context.Context, arg InsertStationTimeseriesParams) error {
	_, err := q.db.ExecContext(ctx, insertStationTimeseries,
		arg.ID,
		arg.Name,
		arg.Lat,
		arg.Lon,
		arg.BikesAvailable,
		arg.EbikesAvailable,
		arg.BikeDocksAvailable,
		arg.LastUpdatedMs,
		arg.IsOffline,
	)
	return err
}
